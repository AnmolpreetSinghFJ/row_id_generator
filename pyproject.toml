[build-system]
requires = ["setuptools>=61.0", "wheel"]
build-backend = "setuptools.build_meta"

[project]
dynamic = ["version"]
name = "row-id-generator"
description = "Generate unique, stable row IDs for Pandas DataFrames with comprehensive observability"
authors = [{name = "Blaise Alako", email = "blaisealako@abcam.com"}]
maintainers = [{name = "Blaise Alako", email = "blaisealako@abcam.com"}]
license = {text = "MIT"}
readme = "README.md"
requires-python = ">=3.9"
classifiers = [
    "Development Status :: 4 - Beta",
    "Intended Audience :: Developers",
    "Intended Audience :: Information Technology",
    "Intended Audience :: Science/Research",
    "Topic :: Database",
    "Topic :: Software Development :: Libraries :: Python Modules",
    "Topic :: Scientific/Engineering :: Information Analysis",
    "Topic :: System :: Monitoring",
    "License :: OSI Approved :: MIT License",
    "Programming Language :: Python :: 3",
    "Programming Language :: Python :: 3.9",
    "Programming Language :: Python :: 3.10",
    "Programming Language :: Python :: 3.11",
    "Programming Language :: Python :: 3.12",
    "Programming Language :: Python :: 3.13",
    "Operating System :: OS Independent",
    "Typing :: Typed",
]
keywords = [
    "pandas", "snowflake", "data", "etl", "unique-id", "hash", "sha256",
    "data-processing", "data-pipeline", "row-id", "database", "observability",
    "monitoring", "metrics", "performance", "data-quality"
]
dependencies = [
    "pandas>=2.1.0,<4.0.0",
    "snowflake-connector-python>=3.0.0,<4.0.0",
    "sqlalchemy==1.4.54",
    "psutil>=5.8.0",
    "tqdm>=4.65.0",
]

[project.optional-dependencies]
# Development tools
dev = [
    "pytest>=7.0.0",
    "pytest-cov>=4.0.0",
    "pytest-mock>=3.10.0",
    "black>=23.0.0",
    "flake8>=6.0.0",
    "isort>=5.12.0",
    "mypy>=1.0.0",
    "types-requests>=2.28.0",
    "sphinx>=6.0.0",
    "sphinx-rtd-theme>=1.2.0",
    "myst-parser>=2.0.0",
    "pre-commit>=3.0.0",
    "twine>=4.0.0",
    "build>=0.10.0",
]

# Testing dependencies
testing = [
    "pytest>=7.0.0",
    "pytest-cov>=4.0.0",
    "pytest-mock>=3.10.0",
    "pytest-xdist>=3.0.0",
    "pytest-timeout>=2.1.0",
    "memory_profiler>=0.60.0",
]

# Performance optimization dependencies
performance = [
    "numpy>=1.23.5",
    "numba>=0.58.0",
    "cython>=3.0.0",
    "memory_profiler>=0.60.0",
]

# Enhanced observability and monitoring
observability = [
    "prometheus-client>=0.17.0",
    "grafana-api>=1.0.3",
    "elasticsearch>=8.0.0",
    "pyyaml>=6.0.0",
    "jinja2>=3.1.0",
]

# Data science and analysis extras
analysis = [
    "jupyter>=1.0.0",
    "ipykernel>=6.0.0",
    "matplotlib>=3.7.0",
    "seaborn>=0.12.0",
    "plotly>=5.15.0",
]

# Documentation building
docs = [
    "sphinx>=6.0.0",
    "sphinx-rtd-theme>=1.2.0",
    "myst-parser>=2.0.0",
    "sphinx-autodoc-typehints>=1.24.0",
    "sphinx-copybutton>=0.5.2",
]

# All extras combined
all = [
    # Include all optional dependencies
    "pytest>=7.0.0",
    "pytest-cov>=4.0.0",
    "pytest-mock>=3.10.0",
    "black>=23.0.0",
    "flake8>=6.0.0",
    "isort>=5.12.0",
    "mypy>=1.0.0",
    "numpy>=1.23.5",
    "numba>=0.58.0",
    "prometheus-client>=0.17.0",
    "jupyter>=1.0.0",
    "matplotlib>=3.7.0",
    "sphinx>=6.0.0",
    "sphinx-rtd-theme>=1.2.0",
]

[project.urls]
Homepage = "https://github.com/alakob/row_id_generator"
Repository = "https://github.com/alakob/row_id_generator.git"
"Bug Reports" = "https://github.com/alakob/row_id_generator/issues"
"Source" = "https://github.com/alakob/row_id_generator"
"Documentation" = "https://github.com/alakob/row_id_generator/blob/main/docs/"
"Changelog" = "https://github.com/alakob/row_id_generator/blob/main/CHANGELOG.md"
"Discussions" = "https://github.com/alakob/row_id_generator/discussions"

# CLI entry point now available since cli.py module was created
[project.scripts]
row-id-generator = "row_id_generator.cli:main"

# Tool configurations
[tool.setuptools.dynamic]
version = {attr = "row_id_generator.__version__"}

[tool.setuptools.packages.find]
exclude = ["tests*", "*.tests", "*.tests.*", "tests.*"]

[tool.setuptools.package-data]
row_id_generator = ["py.typed"]

[tool.black]
line-length = 88
target-version = ['py39']
include = '\.pyi?$'
extend-exclude = '''
/(
  # Directories
  \.eggs
  | \.git
  | \.mypy_cache
  | \.tox
  | \.venv
  | build
  | dist
  | __pycache__
)/
'''

[tool.isort]
profile = "black"
multi_line_output = 3
line_length = 88
known_first_party = ["row_id_generator"]
force_grid_wrap = 0
use_parentheses = true
ensure_newline_before_comments = true

[tool.mypy]
python_version = "3.9"
warn_return_any = true
warn_unused_configs = true
disallow_untyped_defs = true
disallow_incomplete_defs = true
check_untyped_defs = true
disallow_untyped_decorators = true
no_implicit_optional = true
warn_redundant_casts = true
warn_unused_ignores = true
warn_no_return = true
warn_unreachable = true
strict_equality = true
show_error_codes = true

[[tool.mypy.overrides]]
module = "tests.*"
disallow_untyped_defs = false

[tool.pytest.ini_options]
minversion = "7.0"
addopts = "-ra -q --strict-markers --strict-config --tb=short"
testpaths = ["tests"]
python_files = ["test_*.py", "*_test.py"]
python_classes = ["Test*"]
python_functions = ["test_*"]
markers = [
    "unit: Unit tests",
    "integration: Integration tests",
    "performance: Performance tests",
    "slow: Slow running tests",
    "observability: Observability feature tests",
]
filterwarnings = [
    "error",
    "ignore::UserWarning",
    "ignore::DeprecationWarning",
]

[tool.coverage.run]
source = ["row_id_generator"]
branch = true
omit = [
    "*/tests/*",
    "*/test_*",
    "*/__pycache__/*",
]

[tool.coverage.report]
show_missing = true
precision = 2
exclude_lines = [
    "pragma: no cover",
    "def __repr__",
    "if self.debug:",
    "if settings.DEBUG",
    "raise AssertionError",
    "raise NotImplementedError",
    "if 0:",
    "if __name__ == .__main__.:",
    "class .*\\bProtocol\\):",
    "@(abc\\.)?abstractmethod",
    "TYPE_CHECKING",
]

[tool.coverage.html]
directory = "coverage_html"

# Flake8 configuration  
[tool.flake8]
max-line-length = 88
extend-ignore = ["E203", "E501", "W503"]
exclude = [
    ".git",
    "__pycache__",
    "build",
    "dist",
    ".eggs",
    "*.egg-info",
    ".venv",
    ".tox",
]

# UV configuration for modern dependency management
[tool.uv]
dev-dependencies = [
    "pytest>=7.0.0",
    "pytest-cov>=4.0.0",
    "pytest-mock>=3.10.0",
    "pytest-xdist>=3.0.0",
    "black>=23.0.0",
    "flake8>=6.0.0",
    "isort>=5.12.0",
    "mypy>=1.0.0",
    "types-requests>=2.28.0",
    "sphinx>=6.0.0",
    "sphinx-rtd-theme>=1.2.0",
    "myst-parser>=2.0.0",
    "pre-commit>=3.0.0",
    "twine>=4.0.0",
    "build>=0.10.0",
    "jupyter>=1.0.0",
    "ipykernel>=6.0.0",
    "ruff>=0.1.0",
]

[tool.uv.sources]
# Optional: specify custom package sources if needed 

[tool.ruff]
line-length = 88
target-version = "py39"
select = [
    "E",  # pycodestyle errors
    "W",  # pycodestyle warnings
    "F",  # pyflakes
    "I",  # isort
    "B",  # flake8-bugbear
    "C4", # flake8-comprehensions
    "UP", # pyupgrade
]
ignore = [
    "E501",  # line too long, handled by black
    "B008",  # do not perform function calls in argument defaults
]

[tool.ruff.per-file-ignores]
"__init__.py" = ["F401"]  # Allow unused imports in __init__.py
"tests/**/*" = ["B018"]   # Allow useless expression in tests 